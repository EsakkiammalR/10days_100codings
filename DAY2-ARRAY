-1  Best time to sell and Buy

import java.util.Scanner;

class BestTimeToSellAndBuy {

    // Method to get the array input from the user
    public int[] getInputArray() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number of days: ");
        int n = scanner.nextInt();
        int[] prices = new int[n];
        
        System.out.println("Enter the prices for each day: ");
        for (int i = 0; i < n; i++) {
            prices[i] = scanner.nextInt();
        }
        
        return prices;
    }

    // Method to calculate the maximum profit
    public int maxProfit(int[] prices) {
        int min = Integer.MAX_VALUE;
        int maxProfit = 0;
        
        for (int i = 0; i < prices.length; i++) {
            min = Math.min(min, prices[i]);
            maxProfit = Math.max(maxProfit, prices[i] - min);
        }
        
        return maxProfit;
    }

    public static void main(String[] args) {
        BestTimeToSellAndBuy solution = new BestTimeToSellAndBuy();
        
        // Get the input array
        int[] prices = solution.getInputArray();
        
        // Calculate the maximum profit
        int profit = solution.maxProfit(prices);
        
        // Print the result
        System.out.println("Maximum Profit: " + profit);
    }
}

-2.Moves zero to the end of the array

import java.util.Arrays;
class MoveZeros {
    public static void main(String[] args) {
        int a[]={0,1,20,78,0,0,9};
        int nz=0;
        for(int i=0;i<a.length;i++){
            if(a[i]!=0){
                 a[nz]=a[i];
                 nz++;
            }
        }
        for(int i=nz;i<a.length;i++)
            a[i]=0;

        System.out.println(Arrays.toString(a));
        
    }
}

-3.Remove the duplicates from an array

import java.util.Arrays;

class RemoveDuplicateSorted {
    public static int removeDuplicates(int[] a) {
        if (a.length == 0) return 0; // Handle empty array
        
        int ptr = 0; // Pointer to the position of the last unique element
        for (int i = 1; i < a.length; i++) {
            if (a[i] != a[ptr]) {
                ptr++;
                a[ptr] = a[i];
            }
        }
        return ptr + 1; // Length of the array with unique elements
    }

    public static void main(String[] args) {
        int a[] = {0, 0, 1, 1, 7, 7, 8, 9, 9}; // Sorted array for demonstration
        int unique = removeDuplicates(a);

        // Print the unique elements
        System.out.println("Number of unique elements: " + unique);
        System.out.println("Array with unique elements: " + Arrays.toString(Arrays.copyOf(a, unique)));
    }
}

-4.Maxium Consective once

class MaxConsecutive {
    public int maxConsecutive(int[] a) {
        int max = 0;        
        int currCount = 0;  
        
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 1) {
                currCount++;  
            } else {
                max = Math.max(currCount, max);  
                currCount = 0; 
            }
        }
         max = Math.max(currCount, max);
         return max;
    }

    public static void main(String[] args) {
        MaxConsecutive obj = new MaxConsecutive();
        int[] a = {1, 1, 0, 1, 1, 1, 0, 1};  // Example input
        int result = obj.maxConsecutive(a);
        System.out.println("Maximum number of consecutive 1s: " + result);
    }
}

-5.Two sum

import java.util.HashMap;
import java.util.Map;

class TwoSum {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            
            map.put(nums[i], i);
        }
        
        // Return null if no solution is found
        return null;
    }

    public static void main(String[] args) {
        TwoSum obj = new TwoSum();
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] result = obj.twoSum(nums, target);
        
        if (result != null) {
            System.out.println("Indices: " + result[0] + ", " + result[1]);
        } else {
            System.out.println("No two sum solution");
        }
    }
}


-6.Max consective Subarray

class MaxConSubArr {
    public int maxSubarray(int[] num) {
        if (num.length == 0) return 0; // Handle edge case for empty array
        
        int sum = 0; // Current sum of the subarray
        int max = Integer.MIN_VALUE; // Maximum sum found so far
        
        for (int i = 0; i < num.length; i++) {
            sum = Math.max(num[i], sum + num[i]); // Update current subarray sum
            max = Math.max(max, sum); // Update maximum sum if needed
        }
        
        return max;
    }

    public static void main(String[] args) {
        MaxConSubArr obj = new MaxConSubArr();
        int[] num = { -2, 1, -3, 4, -1, 2, 1, -5, 4 }; // Example input
        int result = obj.maxSubarray(num);
        System.out.println("Maximum subarray sum: " + result);
    }
}

-7.Majority element in the array

class MaxConSubArr {
    public int maxSubarray(int[] nums) {
        int size = nums.length; // Get the length of the array
        
        for (int i = 0; i < size; i++) {
            int count = 0; // Initialize count for the current element
            
            // Count the occurrences of nums[i]
            for (int j = 0; j < size; j++) {
                if (nums[j] == nums[i]) {
                    count++;
                }
            }
            
            // Check if the current element is the majority element
            if (count > size / 2) {
                return nums[i];
            }
        }
        
        // If no majority element is found, throw an exception or return an invalid value
        throw new IllegalArgumentException("No majority element found");
    }

    public static void main(String[] args) {
        MaxConSubArr obj = new MaxConSubArr();
        int[] nums = {2, 2, 1, 1, 1, 2, 2};
        try {
            int result = obj.maxSubarray(nums);
            System.out.println("Majority element in array is: " + result);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
    }
}

-8.Missing Number in the array

class MissingNumber {
    public int missingNumber(int[] nums) {
        int N = nums.length;
        int sumUptoN = N * (N + 1) / 2;
        int arrSum = 0;
        for (int i = 0; i < nums.length; i++) {
            arrSum += nums[i];
        }
        
        return sumUptoN - arrSum;
    }

    public static void main(String[] args) {
        MissingNumber obj = new MissingNumber();
        int[] nums = {0, 1, 2, 4}; // Example input
        int result = obj.missingNumber(nums);
        System.out.println("The missing number is: " + result);
    }
}

-9.Find the peakelement in the array

class PeakElement {
    // Method to find the peak element
    public static int findPeakElement(int[] nums) {
        int n = nums.length;
        if (n == 0) {
            return 0; // Indicate that no peak exists
        }
        int start = 0;
        int end = n - 1;
        while (start < end) {
            int mid = (start + end) / 2;
            if (nums[mid] > nums[mid + 1]) {
                end = mid; // Look in the left half
            } else {
                start = mid + 1; // Look in the right half
            }
        }
        return start; // Peak element index
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 5, 6, 8, 5, 4, 3, 2};
        int result = findPeakElement(nums);
        System.out.println("The peak element of the array is:" + nums[result]);
    }
}

10.K divisible element in the array

import java.util.HashMap;

public class KDivisibleSubarrays {
    
    // Function to count the number of subarrays with sum divisible by k
    public static int countKDivisibleSubarrays(int[] nums, int k) {
        if (k == 0) {
            throw new IllegalArgumentException("k cannot be zero");
        }
        
        HashMap<Integer, Integer> remainderCount = new HashMap<>();
        remainderCount.put(0, 1); // Handle the case where a prefix sum itself is divisible by k
        
        int prefixSum = 0;
        int count = 0;
        
        for (int num : nums) {
            prefixSum += num;
            int remainder = prefixSum % k;
            
            // Adjust remainder to be positive
            if (remainder < 0) {
                remainder += k;
            }
            
            // Check if this remainder has been seen before
            if (remainderCount.containsKey(remainder)) {
                count += remainderCount.get(remainder);
            }
            
            // Update the count of this remainder in the hashmap
            remainderCount.put(remainder, remainderCount.getOrDefault(remainder, 0) + 1);
        }
        
        return count;
    }

    public static void main(String[] args) {
        int[] nums = {4, 5, 0, -2, -3, 1};
        int k = 5;
        int result = countKDivisibleSubarrays(nums, k);
        System.out.println("The number of subarrays with sum divisible by " + k + " is " + result);
    }
}



        
    

